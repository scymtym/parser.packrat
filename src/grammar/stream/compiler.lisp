(cl:in-package #:parser.packrat.grammar.stream)

(defmethod compile-expression ((grammar      t)
                               (environment  stream-environment)
                               (expression   seq::bounds-test-expression)
                               (success-cont function)
                               (failure-cont function))
  (let+ (((&accessors-r/o (position seq:position*) check-bounds-function) environment))
   `(if (funcall ,check-bounds-function ,position)
        ,(compile-expression
          grammar environment (exp:sub-expression expression)
          success-cont failure-cont)
        ,(funcall failure-cont environment))))

(defmethod compile-expression ((grammar      t)
                               (environment  stream-environment)
                               (expression   seq::element-access-expression)
                               (success-cont function)
                               (failure-cont function))
  (let+ (((&with-gensyms element))
         ((&accessors-r/o (position seq:position*) access-function) environment)
         (new-environment (env:environment-at environment (list :value element)
                                              :class 'env:value-environment
                                              :state '())))
    `(let ((,element (funcall ,access-function ,position)))
       ,(compile-expression
         grammar new-environment (exp:sub-expression expression)
         success-cont failure-cont))))

;;; Rules

(defmethod parser.packrat.compiler::make-rule-lambda ((grammar     t)
                                                      (environment stream-environment)
                                                      (parameters  t)
                                                      (body        t))
  (let+ (((&accessors-r/o (state-variables env:state-variables)
                          (position-var    seq:position*)
                          (stream-var      stream*)
                          check-bounds-function access-function)
          environment))
   `(lambda (,parser.packrat.compiler::+context-var+ ,@state-variables ,@parameters)
      (declare ;; (optimize (speed 3) (debug 0) (safety 0))
               (ignorable ,parser.packrat.compiler::+context-var+ ,stream-var)
               (type alexandria:array-index ,position-var)
               (type function ,check-bounds-function ,access-function))
      ,@body)))
